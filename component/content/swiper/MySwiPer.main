<template>
    <div @touchstart="touchstartFun" @touchmove="touchmoveFun" @touchend="touchendFun"  @mouseover="stopMobile" @mouseleave="startMobile" class="my-swi-per" :style="{width: width + 'px'}">
        <div ref="imgContainer" class="img-container" :style="{width: width * (imgData.length + 2) + 'px'}">
            <img m-for="v in imgData" :src="v"  :style="{width: width + 'px', height: imgHeight + 'px'}">
        </div>
        <div class="img-index-container">
            <p m-for="v in imgData.length" :style="{backgroundColor: v === currentIndex ? 'red' : 'rgba(255, 255, 255, 0.1)'}"></p>
        </div>
    </div>
</template>
<script>
    let runTransition = input('@/utils/animate.js');
    output = {
        props:{
            imgData: {
                type: Array,
                default:[
                    '@/img/1.jpg',
                    '@/img/2.jpg',
                    '@/img/3.jpg',
                    '@/img/4.jpg'
                ]
            },
            imgWidth: {
                type: Number,
                default: '100%'
            },
            imgHeight: {
                type: Number,
                default: 200
            },
            transitionTime: {
                type: Number,
                default: 500
            },
            stopTime:{
                type: Number,
                default: 3000
            },
            weights:{
                type: Number,
                default: 0.3
            }
        },
        data: function(){
            return {
                marginLeft: 0,
                currentIndex: 1,
                width: 500
            }
        },
        created: function () {
            this.offsetWidth = document.body.offsetWidth;
        },
        mounted: function () {
            //计算宽度
            if(this.imgWidth.constructor === String){
                let index = this.imgWidth.search('%');
                if(index != (-1)){
                    this.width = parseInt(this.offsetWidth / 100 * parseInt(this.imgWidth.substring(0, index)) + '');
                }else{
                    this.width = parseInt(this.imgWidth);
                }
            }
            this.init();
        },
        methods: {
            init: function () {
                let imgContainer = this.$refs['imgContainer'][0];
                let children = imgContainer.children;
                if(children.length > 1){
                    imgContainer.insertBefore(children[children.length - 1].cloneNode(true), children[0]);
                    imgContainer.appendChild(children[1].cloneNode(true));
                    this.mobileMarginLeft(-this.width);
                    this.startMobile();
                }
            },
            stopMobile: function () {
                clearInterval(this.interval);
            },
            runMobile: function () {
                let that = this;
                let mobileWidth = -this.currentIndex * this.width -this.marginLeft;
                runTransition(Math.abs(mobileWidth), this.transitionTime, function (value) {
                    if(mobileWidth > 0){
                        that.marginLeft += value;
                    }else{
                        that.marginLeft -= value;
                    }
                    that.mobileMarginLeft(that.marginLeft);
                }, function () {
                    that.marginLeft = -that.width * that.currentIndex;
                    if(that.currentIndex >= 5){
                        that.currentIndex = 1;
                        that.marginLeft = -that.width;
                    }else if(that.currentIndex <= 0){
                        that.currentIndex = 4;
                        that.marginLeft = -that.width * 4;
                    }
                    that.mobileMarginLeft(that.marginLeft);
                })
            },
            startMobile: function () {
                this.interval = setInterval(() => {
                    this.currentIndex++;
                    this.runMobile();
                }, this.transitionTime + this.stopTime)
            },
            mobileMarginLeft: function (value) {
                this.marginLeft = value;
                this.$refs['imgContainer'][0].style.marginLeft = value + 'px';
            },
            touchstartFun: function (e) {
                this.stopMobile();
                this.touchstartX = e.touches[0].pageX;
                this.startMarginLeft = this.marginLeft;
            },
            touchmoveFun: function (e) {
                let x = e.touches[0].pageX;
                this.marginLeft += x - this.touchstartX;
                this.mobileMarginLeft(this.marginLeft);
                this.touchstartX = x;
            },
            touchendFun: function () {
                let value = this.marginLeft - this.startMarginLeft;
                if(Math.abs(value) / this.width > parseFloat(this.weights)){
                    if(value > 0){
                        this.currentIndex--;
                    }else{
                        this.currentIndex++;
                    }
                }
                this.runMobile();
                this.startMobile();
            }
        }
    }
</script>
<style scoped>
    .my-swi-per{
        position: relative;
        overflow: hidden;
    }
    p{
        margin: 0;
    }
    .img-container{
        font-size: 0;
    }

    .img-container img{

    }
    .img-index-container{
        position: absolute;
        bottom: 10px;
        display: flex;
        width: 100%;
        justify-content: center;
    }

    .img-index-container p{
        width: 10px;
        height: 10px;
        border-radius: 50%;
        border: 1px solid black;
        float: left;
        margin-left: 10px;
        background: rgba(255, 0, 0, 0.1);
    }

</style>